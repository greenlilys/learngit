
查看提交日志：
git log  
git reflog
回退到上一个版本:
git reset --hard HEAD^
回退到上上个版本
git reset --hard HEAD^^
回退到某个版本：
git reset --hard 版本号

放弃工作区的修改：
git checkout -- 文件名
git restore <file>
一种是修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

撤销暂存区的修改：
git reset HEAD 文件名
git restore --staged <file>

删除文件：
git rm 文件名
git commit -m "remove xxx"  同步到版本库

误删的文件从版本库恢复
git checkout -- 文件名
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”

关联远程仓库：
git remote add origin git@server-name:path/repo-name.git
git remote add origin
首次提交本地仓库文件
git push -u origin master
git push -u origin master

创建分支dev：
git branch <name>
切换分支：
git checkout <name>
git switch <name> （新版本 建议使用）

创建分支并切换到新创建的分支上
git checkout -b <name>
git switch -c <name>（新版本 建议使用）

删除分支:
git branch -d <name>
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除

查看当前分支：
git branch

git merge命令用于合并指定分支到当前分支

暂存工作现场：
git stash
查看暂存工作现场列表：
git stash list
恢复工作现场并把stash内容删除
git stash drop
恢复指定的stash: 根据git stash list的查询结果
git stash apply xxx

复制一个特定的提交到当前分支
git cherry-pich <id>

clone之后的本地默认只有master分支，创建远程origin的dev分支到本地需要执行
git checkout -b dev origin/dev

指定本地dev分支与远程origin/dev分支的链接
git branch --set-upstream-to=origin/dev dev







